package de.viperpit.agent.data.jna;

import java.util.Arrays;
import java.util.List;

import com.sun.jna.Library;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

/**
 * JNA Wrapper for library <b>FlightData</b><br>
 * This file was autogenerated by
 * <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that
 * <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a
 * few opensource projects.</a>.<br>
 * For help, please visit
 * <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> ,
 * <a href="http://rococoa.dev.java.net/">Rococoa</a>, or
 * <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface FlightDataLibrary extends Library {
	public static final int FLIGHTDATA_VERSION = (int) 118;
	public static final int OSB_STRING_LENGTH = (int) 8;
	public static final int FLIGHTDATA2_VERSION = (int) 17;
	public static final int RWRINFO_SIZE = (int) 512;
	public static final int CALLSIGN_LEN = (int) 12;
	public static final int MAX_CALLSIGNS = (int) 32;
	public static final int STRINGDATA_VERSION = (int) 3;
	public static final int STRINGDATA_AREA_SIZE_MAX = (int) (1024 * 1024);
	public static final int DRAWINGDATA_VERSION = (int) 1;
	public static final int DRAWINGDATA_AREA_SIZE_MAX = (int) (1024 * 1024);

	/** *** "FalconSharedMemoryArea" *** */
	public static class FlightData extends Structure {
		/** enum values */
		public static interface LightBits {
			/** Left eyebrow */
			public static final int MasterCaution = 0x1;
			/** Left eyebrow */
			public static final int TF = 0x2;
			/** repurposed for eyebrow OXY LOW (was OBS, unused) */
			public static final int OXY_BROW = 0x4;
			/** Caution light; repurposed for cooling fault (was: not used) */
			public static final int EQUIP_HOT = 0x8;
			/** True if on ground: this is not a lamp bit! */
			public static final int ONGROUND = 0x10;
			/** Right eyebrow; upper half of split face lamp */
			public static final int ENG_FIRE = 0x20;
			/** Stores config, caution panel */
			public static final int CONFIG = 0x40;
			/** Right eyebrow; see also OIL (this lamp is not split face) */
			public static final int HYD = 0x80;
			/**
			 * TEST panel FLCS channel lamps; repurposed, was OIL (see HYD; that lamp is not
			 * split face)
			 */
			public static final int Flcs_ABCD = 0x100;
			/**
			 * Right eyebrow; was called DUAL which matches block 25, 30/32 and older 40/42
			 */
			public static final int FLCS = 0x200;
			/** Right eyebrow */
			public static final int CAN = 0x400;
			/** Right eyebrow */
			public static final int T_L_CFG = 0x800;
			public static final int AOAAbove = 0x1000;
			public static final int AOAOn = 0x2000;
			public static final int AOABelow = 0x4000;
			public static final int RefuelRDY = 0x8000;
			public static final int RefuelAR = 0x10000;
			public static final int RefuelDSC = 0x20000;
			public static final int FltControlSys = 0x40000;
			public static final int LEFlaps = 0x80000;
			public static final int EngineFault = 0x100000;
			public static final int Overheat = 0x200000;
			public static final int FuelLow = 0x400000;
			public static final int Avionics = 0x800000;
			public static final int RadarAlt = 0x1000000;
			public static final int IFF = 0x2000000;
			public static final int ECM = 0x4000000;
			public static final int Hook = 0x8000000;
			public static final int NWSFail = 0x10000000;
			public static final int CabinPress = 0x20000000;
			/** TRUE if is AP on. NB: This is not a lamp bit! */
			public static final int AutoPilotOn = 0x40000000;
			/** MISC panel; lower half of split face TFR lamp */
			public static final int TFR_STBY = 0x80000000;
			public static final int AllLampBitsOn = 0xBFFFFFEF;
		};

		/** enum values */
		public static interface LightBits2 {
			public static final int HandOff = 0x1;
			public static final int Launch = 0x2;
			public static final int PriMode = 0x4;
			public static final int Naval = 0x8;
			public static final int Unk = 0x10;
			public static final int TgtSep = 0x20;
			/** On and operating normally */
			public static final int Go = 0x40;
			/** On but malfunction present */
			public static final int NoGo = 0x80;
			/** Status message: AUTO DEGR */
			public static final int Degr = 0x100;
			/** Status message: DISPENSE RDY */
			public static final int Rdy = 0x200;
			/** Bingo chaff quantity reached */
			public static final int ChaffLo = 0x400;
			/** Bingo flare quantity reached */
			public static final int FlareLo = 0x800;
			public static final int AuxSrch = 0x1000;
			public static final int AuxAct = 0x2000;
			public static final int AuxLow = 0x4000;
			public static final int AuxPwr = 0x8000;
			public static final int EcmPwr = 0x10000;
			public static final int EcmFail = 0x20000;
			public static final int FwdFuelLow = 0x40000;
			public static final int AftFuelLow = 0x80000;
			/** EPU panel; run light */
			public static final int EPUOn = 0x100000;
			/** Eng Jet Start panel; run light */
			public static final int JFSOn = 0x200000;
			public static final int SEC = 0x400000;
			public static final int OXY_LOW = 0x800000;
			public static final int PROBEHEAT = 0x1000000;
			public static final int SEAT_ARM = 0x2000000;
			public static final int BUC = 0x4000000;
			public static final int FUEL_OIL_HOT = 0x8000000;
			public static final int ANTI_SKID = 0x10000000;
			/** MISC panel; upper half of split face TFR lamp */
			public static final int TFR_ENGAGED = 0x20000000;
			/** Lamp in gear handle lights on fault or gear in motion */
			public static final int GEARHANDLE = 0x40000000;
			/** Lower half of right eyebrow ENG FIRE/ENGINE lamp */
			public static final int ENGINE = 0x80000000;
			public static final int AllLampBits2On = 0xFFFFF03F;
			public static final int AllLampBits2OnExceptCarapace = (int) AllLampBits2On ^ (int) HandOff ^ (int) Launch
					^ (int) PriMode ^ (int) Naval ^ (int) Unk ^ (int) TgtSep ^ (int) AuxSrch ^ (int) AuxAct
					^ (int) AuxLow ^ (int) AuxPwr;
		};

		/** enum values */
		public static interface LightBits3 {
			public static final int FlcsPmg = 0x1;
			public static final int MainGen = 0x2;
			public static final int StbyGen = 0x4;
			public static final int EpuGen = 0x8;
			public static final int EpuPmg = 0x10;
			public static final int ToFlcs = 0x20;
			public static final int FlcsRly = 0x40;
			public static final int BatFail = 0x80;
			public static final int Hydrazine = 0x100;
			public static final int Air = 0x200;
			public static final int Elec_Fault = 0x400;
			public static final int Lef_Fault = 0x800;
			/** weight-on-wheels */
			public static final int OnGround = 0x1000;
			/** FLT CONTROL panel RUN light (used to be Multi-engine fire light) */
			public static final int FlcsBitRun = 0x2000;
			/** FLT CONTROL panel FAIL light (used to be Lock light Cue; non-F-16) */
			public static final int FlcsBitFail = 0x4000;
			/** Right eyebrow DBU ON cell; was Shoot light cue; non-F16 */
			public static final int DbuWarn = 0x8000;
			/** Landing gear panel; on means down and locked */
			public static final int NoseGearDown = 0x10000;
			/** Landing gear panel; on means down and locked */
			public static final int LeftGearDown = 0x20000;
			/** Landing gear panel; on means down and locked */
			public static final int RightGearDown = 0x40000;
			/** Parking brake engaged; NOTE: not a lamp bit */
			public static final int ParkBrakeOn = 0x100000;
			/** Set if there is no electrical power. NB: not a lamp bit */
			public static final int Power_Off = 0x200000;
			public static final int cadc = 0x400000;
			/** True if speed brake is in anything other than stowed position */
			public static final int SpeedBrake = 0x800000;
			public static final int SysTest = 0x1000000;
			public static final int MCAnnounced = 0x2000000;
			public static final int MLGWOW = 0x4000000;
			public static final int NLGWOW = 0x8000000;
			public static final int ATF_Not_Engaged = 0x10000000;
			public static final int Inlet_Icing = 0x20000000;
			public static final int AllLampBits3On = 0x3147EFFF;
			public static final int AllLampBits3OnExceptCarapace = (int) AllLampBits3On ^ (int) SysTest;
		};

		/** enum values */
		public static interface HsiBits {
			/** HSI_FLAG_TO_TRUE == 1, TO */
			public static final int ToTrue = 0x01;
			/** HSI_FLAG_ILS_WARN */
			public static final int IlsWarning = 0x02;
			/** HSI_FLAG_CRS_WARN */
			public static final int CourseWarning = 0x04;
			/** HSI_FLAG_INIT */
			public static final int Init = 0x08;
			/** HSI_FLAG_TOTAL_FLAGS; never set */
			public static final int TotalFlags = 0x10;
			/** ADI OFF Flag */
			public static final int ADI_OFF = 0x20;
			/** ADI AUX Flag */
			public static final int ADI_AUX = 0x40;
			/** ADI GS FLAG */
			public static final int ADI_GS = 0x80;
			/** ADI LOC FLAG */
			public static final int ADI_LOC = 0x100;
			/** HSI OFF Flag */
			public static final int HSI_OFF = 0x200;
			/** Backup ADI Off Flag */
			public static final int BUP_ADI_OFF = 0x400;
			/** VVI OFF Flag */
			public static final int VVI = 0x800;
			/** AOA OFF Flag */
			public static final int AOA = 0x1000;
			/** AVTR Light */
			public static final int AVTR = 0x2000;
			/** MARKER beacon light for outer marker */
			public static final int OuterMarker = 0x4000;
			/** MARKER beacon light for middle marker */
			public static final int MiddleMarker = 0x8000;
			/** HSI_FLAG_TO_TRUE == 2, FROM */
			public static final int FromTrue = 0x10000;
			/**
			 * true if player is attached to an aircraft (i.e. not in UI state). NOTE: Not a
			 * lamp bit
			 */
			public static final int Flying = 0x80000000;
			public static final int AllLampHsiBitsOn = 0xE000;
		};

		/** Ownship North (Ft) */
		public float x;
		/** Ownship East (Ft) */
		public float y;
		/** Ownship Down (Ft) --- NOTE: use FlightData2 AAUZ for barometric altitude! */
		public float z;
		/** Ownship North Rate (ft/sec) */
		public float xDot;
		/** Ownship East Rate (ft/sec) */
		public float yDot;
		/** Ownship Down Rate (ft/sec) */
		public float zDot;
		/** Ownship AOA (Degrees) */
		public float alpha;
		/** Ownship Beta (Degrees) */
		public float beta;
		/** Ownship Gamma (Radians) */
		public float gamma;
		/** Ownship Pitch (Radians) */
		public float pitch;
		/** Ownship Pitch (Radians) */
		public float roll;
		/** Ownship Pitch (Radians) */
		public float yaw;
		/** Ownship Mach number */
		public float mach;
		/** Ownship Indicated Airspeed (Knots) */
		public float kias;
		/** Ownship True Airspeed (Ft/Sec) */
		public float vt;
		/** Ownship Normal Gs */
		public float gs;
		/** Wind delta to FPM (Radians) */
		public float windOffset;
		/** Ownship engine nozzle percent open (0-100) */
		public float nozzlePos;
		/** Ownship internal fuel (Lbs) */
		public float internalFuel;
		/** Ownship external fuel (Lbs) */
		public float externalFuel;
		/** Ownship fuel flow (Lbs/Hour) */
		public float fuelFlow;
		/** Ownship engine rpm (Percent 0-103) */
		public float rpm;
		/** Ownship Forward Turbine Inlet Temp (Degrees C) */
		public float ftit;
		/** Ownship Gear position 0 = up, 1 = down; */
		public float gearPos;
		/** Ownship speed brake position 0 = closed, 1 = 60 Degrees open */
		public float speedBrake;
		/** Ownship EPU fuel (Percent 0-100) */
		public float epuFuel;
		/** Ownship Oil Pressure (Percent 0-100) */
		public float oilPressure;
		/** Cockpit Indicator Lights, one bit per bulb. See enum */
		public int lightBits;
		/** Head pitch offset from design eye (radians) */
		public float headPitch;
		/** Head roll offset from design eye (radians) */
		public float headRoll;
		/** Head yaw offset from design eye (radians) */
		public float headYaw;
		/** Cockpit Indicator Lights, one bit per bulb. See enum */
		public int lightBits2;
		/** Cockpit Indicator Lights, one bit per bulb. See enum */
		public int lightBits3;
		/** Number of Chaff left */
		public float ChaffCount;
		/** Number of Flare left */
		public float FlareCount;
		/**
		 * Position of the nose landinggear; caution: full down values defined in dat
		 * files
		 */
		public float NoseGearPos;
		/**
		 * Position of the left landinggear; caution: full down values defined in dat
		 * files
		 */
		public float LeftGearPos;
		/**
		 * Position of the right landinggear; caution: full down values defined in dat
		 * files
		 */
		public float RightGearPos;
		/** Position of horizontal ILS bar */
		public float AdiIlsHorPos;
		/** Position of vertical ILS bar */
		public float AdiIlsVerPos;
		/** HSI_STA_CRS_STATE */
		public int courseState;
		/** HSI_STA_HDG_STATE */
		public int headingState;
		/** HSI_STA_TOTAL_STATES; never set */
		public int totalStates;
		/** HSI_VAL_CRS_DEVIATION */
		public float courseDeviation;
		/** HSI_VAL_DESIRED_CRS */
		public float desiredCourse;
		/** HSI_VAL_DISTANCE_TO_BEACON */
		public float distanceToBeacon;
		/** HSI_VAL_BEARING_TO_BEACON */
		public float bearingToBeacon;
		/** HSI_VAL_CURRENT_HEADING */
		public float currentHeading;
		/** HSI_VAL_DESIRED_HEADING */
		public float desiredHeading;
		/** HSI_VAL_DEV_LIMIT */
		public float deviationLimit;
		/** HSI_VAL_HALF_DEV_LIMIT */
		public float halfDeviationLimit;
		/** HSI_VAL_LOCALIZER_CRS */
		public float localizerCourse;
		/** HSI_VAL_AIRBASE_X */
		public float airbaseX;
		/** HSI_VAL_AIRBASE_Y */
		public float airbaseY;
		/** HSI_VAL_TOTAL_VALUES; never set */
		public float totalValues;
		/** Value of trim in pitch axis, -0.5 to +0.5 */
		public float TrimPitch;
		/** Value of trim in roll axis, -0.5 to +0.5 */
		public float TrimRoll;
		/** Value of trim in yaw axis, -0.5 to +0.5 */
		public float TrimYaw;
		/** HSI flags */
		public int hsiBits;
		/**
		 * 25 usable chars<br>
		 * C type : char[5][26]
		 */
		public byte[] DEDLines = new byte[((5) * (26))];
		/**
		 * 25 usable chars<br>
		 * C type : char[5][26]
		 */
		public byte[] Invert = new byte[((5) * (26))];
		/**
		 * 25 usable chars<br>
		 * C type : char[5][26]
		 */
		public byte[] PFLLines = new byte[((5) * (26))];
		/**
		 * 25 usable chars<br>
		 * C type : char[5][26]
		 */
		public byte[] PFLInvert = new byte[((5) * (26))];
		public int UFCTChan;
		public int AUXTChan;
		public int RwrObjectCount;
		/** C type : int[40] */
		public int[] RWRsymbol = new int[40];
		/** C type : float[40] */
		public float[] bearing = new float[40];
		/** C type : unsigned long[40] */
		public NativeLong[] missileActivity = new NativeLong[40];
		/** C type : unsigned long[40] */
		public NativeLong[] missileLaunch = new NativeLong[40];
		/** C type : unsigned long[40] */
		public NativeLong[] selected = new NativeLong[40];
		/** C type : float[40] */
		public float[] lethality = new float[40];
		/** C type : unsigned long[40] */
		public NativeLong[] newDetection = new NativeLong[40];
		public float fwd;
		public float aft;
		public float total;
		/** Version of FlightData mem area */
		public int VersionNum;
		/** Head X offset from design eye (feet) */
		public float headX;
		/** Head Y offset from design eye (feet) */
		public float headY;
		/** Head Z offset from design eye (feet) */
		public float headZ;
		/** Main Power switch state, 0=down, 1=middle, 2=up */
		public int MainPower;

		public FlightData() {
			super();
		}

		protected List<String> getFieldOrder() {
			return Arrays.asList("x", "y", "z", "xDot", "yDot", "zDot", "alpha", "beta", "gamma", "pitch", "roll",
					"yaw", "mach", "kias", "vt", "gs", "windOffset", "nozzlePos", "internalFuel", "externalFuel",
					"fuelFlow", "rpm", "ftit", "gearPos", "speedBrake", "epuFuel", "oilPressure", "lightBits",
					"headPitch", "headRoll", "headYaw", "lightBits2", "lightBits3", "ChaffCount", "FlareCount",
					"NoseGearPos", "LeftGearPos", "RightGearPos", "AdiIlsHorPos", "AdiIlsVerPos", "courseState",
					"headingState", "totalStates", "courseDeviation", "desiredCourse", "distanceToBeacon",
					"bearingToBeacon", "currentHeading", "desiredHeading", "deviationLimit", "halfDeviationLimit",
					"localizerCourse", "airbaseX", "airbaseY", "totalValues", "TrimPitch", "TrimRoll", "TrimYaw",
					"hsiBits", "DEDLines", "Invert", "PFLLines", "PFLInvert", "UFCTChan", "AUXTChan", "RwrObjectCount",
					"RWRsymbol", "bearing", "missileActivity", "missileLaunch", "selected", "lethality", "newDetection",
					"fwd", "aft", "total", "VersionNum", "headX", "headY", "headZ", "MainPower");
		}

		public FlightData(Pointer peer) {
			super(peer);
		}

		public static class ByReference extends FlightData implements Structure.ByReference {

		};

		public static class ByValue extends FlightData implements Structure.ByValue {

		};
	};

	/** OSB capture for MFD button labeling */
	public static class OsbLabel extends Structure {
		/** C type : char[8] */
		public byte[] line1 = new byte[8];
		/** C type : char[8] */
		public byte[] line2 = new byte[8];
		public byte inverted;

		public OsbLabel() {
			super();
		}

		protected List<String> getFieldOrder() {
			return Arrays.asList("line1", "line2", "inverted");
		}

		/**
		 * @param line1 C type : char[8]<br>
		 * @param line2 C type : char[8]
		 */
		public OsbLabel(byte line1[], byte line2[], byte inverted) {
			super();
			if ((line1.length != this.line1.length))
				throw new IllegalArgumentException("Wrong array size !");
			this.line1 = line1;
			if ((line2.length != this.line2.length))
				throw new IllegalArgumentException("Wrong array size !");
			this.line2 = line2;
			this.inverted = inverted;
		}

		public OsbLabel(Pointer peer) {
			super(peer);
		}

		public static class ByReference extends OsbLabel implements Structure.ByReference {

		};

		public static class ByValue extends OsbLabel implements Structure.ByValue {

		};
	};

	/** *** "FalconSharedOsbMemoryArea" *** */
	public static class OSBData extends Structure {
		/** C type : OsbLabel[20] */
		public FlightDataLibrary.OsbLabel[] leftMFD = new FlightDataLibrary.OsbLabel[20];
		/** C type : OsbLabel[20] */
		public FlightDataLibrary.OsbLabel[] rightMFD = new FlightDataLibrary.OsbLabel[20];

		public OSBData() {
			super();
		}

		protected List<String> getFieldOrder() {
			return Arrays.asList("leftMFD", "rightMFD");
		}

		/**
		 * @param leftMFD  C type : OsbLabel[20]<br>
		 * @param rightMFD C type : OsbLabel[20]
		 */
		public OSBData(FlightDataLibrary.OsbLabel leftMFD[], FlightDataLibrary.OsbLabel rightMFD[]) {
			super();
			if ((leftMFD.length != this.leftMFD.length))
				throw new IllegalArgumentException("Wrong array size !");
			this.leftMFD = leftMFD;
			if ((rightMFD.length != this.rightMFD.length))
				throw new IllegalArgumentException("Wrong array size !");
			this.rightMFD = rightMFD;
		}

		public OSBData(Pointer peer) {
			super(peer);
		}

		public static class ByReference extends OSBData implements Structure.ByReference {

		};

		public static class ByValue extends OSBData implements Structure.ByValue {

		};
	};

	/** *** "FalconSharedMemoryArea2" *** */
	public static class FlightData2 extends Structure {
		/** enum values */
		public static interface TacanSources {
			public static final int UFC = 0;
			public static final int AUX = 1;
			public static final int NUMBER_OF_SOURCES = 2;
		};

		/** enum values */
		public static interface TacanBits {
			/** true in this bit position if band is X */
			public static final int band = 0x01;
			/** true in this bit position if domain is air to air */
			public static final int mode = 0x02;
		};

		/** enum values */
		public static interface AltBits {
			/**
			 * true if calibration in inches of Mercury (Hg), false if in hectoPascal (hPa)
			 */
			public static final int CalType = 0x01;
			/** true if PNEU flag is visible */
			public static final int PneuFlag = 0x02;
		};

		/** enum values */
		public static interface PowerBits {
			/** true if at least the battery bus is powered */
			public static final int BusPowerBattery = 0x01;
			/** true if at least the emergency bus is powered */
			public static final int BusPowerEmergency = 0x02;
			/** true if at least the essential bus is powered */
			public static final int BusPowerEssential = 0x04;
			/** true if at least the non-essential bus is powered */
			public static final int BusPowerNonEssential = 0x08;
			/** true if the main generator is online */
			public static final int MainGenerator = 0x10;
			/** true if the standby generator is online */
			public static final int StandbyGenerator = 0x20;
			/** true if JFS is running, can be used for magswitch */
			public static final int JetFuelStarter = 0x40;
		};

		/** enum values */
		public static interface BlinkBits {
			/** defined in HsiBits - slow flashing for outer marker */
			public static final int OuterMarker = 0x01;
			/** defined in HsiBits - fast flashing for middle marker */
			public static final int MiddleMarker = 0x02;
			/** defined in LightBits2 - probeheat system is tested */
			public static final int PROBEHEAT = 0x04;
			/**
			 * defined in LightBits2 - search function in NOT activated and a search radar
			 * is painting ownship
			 */
			public static final int AuxSrch = 0x08;
			/** defined in LightBits2 - missile is fired at ownship */
			public static final int Launch = 0x10;
			/**
			 * defined in LightBits2 - priority mode is enabled but more than 5 threat
			 * emitters are detected
			 */
			public static final int PriMode = 0x20;
			/**
			 * defined in LightBits2 - unknown is not active but EWS detects unknown radar
			 */
			public static final int Unk = 0x40;
			/** defined in LightBits3 - non-resetting fault */
			public static final int Elec_Fault = 0x80;
			/** defined in LightBits - monitor fault during Obogs */
			public static final int OXY_BROW = 0x100;
			/** defined in LightBits3 - abnormal EPU operation */
			public static final int EPUOn = 0x200;
			/** defined in LightBits3 - slow blinking: non-critical failure */
			public static final int JFSOn_Slow = 0x400;
			/** defined in LightBits3 - fast blinking: critical failure */
			public static final int JFSOn_Fast = 0x800;
		};

		/** enum values */
		public static interface CmdsModes {
			public static final int CmdsOFF = 0;
			public static final int CmdsSTBY = 1;
			public static final int CmdsMAN = 2;
			public static final int CmdsSEMI = 3;
			public static final int CmdsAUTO = 4;
			public static final int CmdsBYP = 5;
		};

		/** enum values */
		public static interface NavModes {
			public static final int ILS_TACAN = 0;
			public static final int TACAN = 1;
			public static final int NAV = 2;
			public static final int ILS_NAV = 3;
		};

		/** enum values */
		public static interface FlyStates {
			/** UI - in the UI */
			public static final int IN_UI = 0;
			/** UI>3D - loading the sim data */
			public static final int LOADING = 1;
			/** UI>3D - waiting for other players */
			public static final int WAITING = 2;
			/** 3D - flying */
			public static final int FLYING = 3;
			/** 3D>Dead - dead, waiting to respawn */
			public static final int DEAD = 4;
			/** ??? */
			public static final int UNKNOWN = 5;
		};

		/** enum values */
		public static interface RTT_areas {
			public static final int RTT_HUD = 0;
			public static final int RTT_PFL = 1;
			public static final int RTT_DED = 2;
			public static final int RTT_RWR = 3;
			public static final int RTT_MFDLEFT = 4;
			public static final int RTT_MFDRIGHT = 5;
			public static final int RTT_HMS = 6;
			public static final int RTT_noOfAreas = 7;
		};

		/** enum values */
		public static interface InstrLight {
			public static final int INSTR_LIGHT_OFF = 0;
			public static final int INSTR_LIGHT_DIM = 1;
			public static final int INSTR_LIGHT_BRT = 2;
		};

		/** enum values */
		public static interface BettyBits {
			public static final int Betty_Allwords = 0x00001;
			public static final int Betty_Pullup = 0x00002;
			public static final int Betty_Altitude = 0x00004;
			public static final int Betty_Warning = 0x00008;
			public static final int Betty_Jammer = 0x00010;
			public static final int Betty_Counter = 0x00020;
			public static final int Betty_ChaffFlare = 0x00040;
			public static final int Betty_ChaffFlare_Low = 0x00080;
			public static final int Betty_ChaffFlare_Out = 0x00100;
			public static final int Betty_Lock = 0x00200;
			public static final int Betty_Caution = 0x00400;
			public static final int Betty_Bingo = 0x00800;
			public static final int Betty_Data = 0x01000;
			public static final int Betty_IFF = 0x02000;
			public static final int Betty_Lowspeed = 0x04000;
			public static final int Betty_Beeps = 0x08000;
			public static final int Betty_AOA = 0x10000;
			public static final int Betty_MaxG = 0x20000;
		};

		/** enum values */
		public static interface MiscBits {
			/** indicates weather the RALT reading is valid/reliable */
			public static final int RALT_Valid = 0x01;
			public static final int Flcs_Flcc_A = 0x02;
			public static final int Flcs_Flcc_B = 0x04;
			public static final int Flcs_Flcc_C = 0x08;
			public static final int Flcs_Flcc_D = 0x10;
			/** 0 not powered or failed or WOW , 1 is working OK */
			public static final int SolenoidStatus = 0x20;
			public static final int AllLampBitsFlccOn = 0x1e;
		};

		/** Ownship engine nozzle2 percent open (0-100) */
		public float nozzlePos2;
		/** Ownship engine rpm2 (Percent 0-103) */
		public float rpm2;
		/** Ownship Forward Turbine Inlet Temp2 (Degrees C) */
		public float ftit2;
		/** Ownship Oil Pressure2 (Percent 0-100) */
		public float oilPressure2;
		/**
		 * @see NavModes<br>
		 *      (unsigned char) current mode selected for HSI/eHSI, see NavModes enum
		 *      for details<br>
		 *      C type : NavModes
		 */
		public int navMode;
		/** Ownship barometric altitude given by AAU (depends on calibration) */
		public float AAUZ;
		/**
		 * Tacan band/mode settings for UFC and AUX COMM<br>
		 * C type : char[NUMBER_OF_SOURCES]
		 */
		public byte[] tacanInfo = new byte[(int) TacanSources.NUMBER_OF_SOURCES];
		/** barometric altitude calibration (depends on CalType) */
		public int AltCalReading;
		/** various altimeter bits, see AltBits enum for details */
		public int altBits;
		/** Ownship power bus / generator states, see PowerBits enum for details */
		public int powerBits;
		/** Cockpit indicator lights blink status, see BlinkBits enum for details */
		public int blinkBits;
		/**
		 * @see CmdsModes<br>
		 *      (int) Ownship CMDS mode state, see CmdsModes enum for details<br>
		 *      C type : CmdsModes
		 */
		public int cmdsMode;
		/** BUP UHF channel preset */
		public int BupUhfPreset;
		/** BUP UHF channel frequency */
		public int BupUhfFreq;
		/** Ownship cabin altitude */
		public float cabinAlt;
		/** Ownship Hydraulic Pressure A */
		public float hydPressureA;
		/** Ownship Hydraulic Pressure B */
		public float hydPressureB;
		/** Current time in seconds (max 60 * 60 * 24) */
		public int currentTime;
		/** Ownship ACD index number, i.e. which aircraft type are we flying. */
		public short vehicleACD;
		/** Version of FlightData2 mem area */
		public int VersionNum;
		/** Ownship fuel flow2 (Lbs/Hour) */
		public float fuelFlow2;
		/**
		 * New RWR Info<br>
		 * C type : char[512]
		 */
		public byte[] RwrInfo = new byte[512];
		/** Ownship LEF position */
		public float lefPos;
		/** Ownship TEF position */
		public float tefPos;
		/** Ownship VTOL exhaust angle */
		public float vtolPos;
		/** Number of pilots in an MP session */
		public byte pilotsOnline;
		/**
		 * List of pilots callsign connected to an MP session<br>
		 * C type : char[32][12]
		 */
		public byte[] pilotsCallsign = new byte[((32) * (12))];
		/**
		 * Status of the MP pilots, see enum FlyStates<br>
		 * C type : char[32]
		 */
		public byte[] pilotsStatus = new byte[32];
		/** Intensity of a "bump" while taxiing/rolling, 0..1 */
		public float bumpIntensity;
		/** Ownship latitude in degrees (as known by avionics) */
		public float latitude;
		/** Ownship longitude in degrees (as known by avionics) */
		public float longitude;
		/**
		 * RTT overall width and height<br>
		 * C type : unsigned short[2]
		 */
		public short[] RTT_size = new short[2];
		/**
		 * For each area: left/top/right/bottom<br>
		 * C type : unsigned short[RTT_noOfAreas][4]
		 */
		public short[] RTT_area = new short[(((int) RTT_areas.RTT_noOfAreas) * (4))];
		/** IFF panel backup Mode1 digit 1 */
		public byte iffBackupMode1Digit1;
		/** IFF panel backup Mode1 digit 2 */
		public byte iffBackupMode1Digit2;
		/** IFF panel backup Mode3A digit 1 */
		public byte iffBackupMode3ADigit1;
		/** IFF panel backup Mode3A digit 2 */
		public byte iffBackupMode3ADigit2;
		/**
		 * @see InstrLight<br>
		 *      (unsigned char) current instrument backlight brightness setting, see
		 *      InstrLight enum for details<br>
		 *      C type : InstrLight
		 */
		public int instrLight;
		/** see BettyBits enum for details */
		public int bettyBits;
		/** see MiscBits enum for details */
		public int miscBits;
		/** radar altitude (only valid/ reliable if MiscBit "RALT_Valid" is set) */
		public float RALT;
		/** bingo fuel level */
		public float bingoFuel;
		/** cara alow setting */
		public float caraAlow;
		/** bullseye X in sim coordinates (same as ownship, i.e. North (Ft)) */
		public float bullseyeX;
		/** bullseye Y in sim coordinates (same as ownship, i.e. East (Ft)) */
		public float bullseyeY;
		/** E.g. 4. */
		public int BMSVersionMajor;
		/** 34. */
		public int BMSVersionMinor;
		/** 1 */
		public int BMSVersionMicro;
		/** build 20050 */
		public int BMSBuildNumber;
		/** the overall size of the StringData/FalconSharedMemoryAreaString area */
		public int StringAreaSize;
		/**
		 * last time the StringData/FalconSharedMemoryAreaString area has been changed -
		 * you only need to re-read the string shared mem if this changes
		 */
		public int StringAreaTime;
		/** the overall size of the DrawingData/FalconSharedMemoryAreaDrawing area */
		public int DrawingAreaSize;
		/** actual turn rate (no delay or dampening) in degrees/second */
		public float turnRate;

		public FlightData2() {
			super();
		}

		protected List<String> getFieldOrder() {
			return Arrays.asList("nozzlePos2", "rpm2", "ftit2", "oilPressure2", "navMode", "AAUZ", "tacanInfo",
					"AltCalReading", "altBits", "powerBits", "blinkBits", "cmdsMode", "BupUhfPreset", "BupUhfFreq",
					"cabinAlt", "hydPressureA", "hydPressureB", "currentTime", "vehicleACD", "VersionNum", "fuelFlow2",
					"RwrInfo", "lefPos", "tefPos", "vtolPos", "pilotsOnline", "pilotsCallsign", "pilotsStatus",
					"bumpIntensity", "latitude", "longitude", "RTT_size", "RTT_area", "iffBackupMode1Digit1",
					"iffBackupMode1Digit2", "iffBackupMode3ADigit1", "iffBackupMode3ADigit2", "instrLight", "bettyBits",
					"miscBits", "RALT", "bingoFuel", "caraAlow", "bullseyeX", "bullseyeY", "BMSVersionMajor",
					"BMSVersionMinor", "BMSVersionMicro", "BMSBuildNumber", "StringAreaSize", "StringAreaTime",
					"DrawingAreaSize", "turnRate");
		}

		public FlightData2(Pointer peer) {
			super(peer);
		}

		public static class ByReference extends FlightData2 implements Structure.ByReference {

		};

		public static class ByValue extends FlightData2 implements Structure.ByValue {

		};
	};

	/** *** "FalconSharedMemoryAreaString" *** */
	public static class StringData extends Structure {
		/** enum values */
		public static interface StringIdentifier {
			/** BMS exe name, full path */
			public static final int BmsExe = 0;
			/** Key file name in use, full path */
			public static final int KeyFile = 1;
			/** BmsBasedir to BmsPictureDirectory: */
			public static final int BmsBasedir = 2;
			/** - BMS directories in use */
			public static final int BmsBinDirectory = 3;
			public static final int BmsDataDirectory = 4;
			public static final int BmsUIArtDirectory = 5;
			public static final int BmsUserDirectory = 6;
			public static final int BmsAcmiDirectory = 7;
			public static final int BmsBriefingsDirectory = 8;
			public static final int BmsConfigDirectory = 9;
			public static final int BmsLogsDirectory = 10;
			public static final int BmsPatchDirectory = 11;
			public static final int BmsPictureDirectory = 12;
			/** Current theater name */
			public static final int ThrName = 13;
			/** ThrCampaigndir to ThrTacrefpicsdir: */
			public static final int ThrCampaigndir = 14;
			/** - Current theater directories in use */
			public static final int ThrTerraindir = 15;
			public static final int ThrArtdir = 16;
			public static final int ThrMoviedir = 17;
			public static final int ThrUisounddir = 18;
			public static final int ThrObjectdir = 19;
			public static final int Thr3ddatadir = 20;
			public static final int ThrMisctexdir = 21;
			public static final int ThrSounddir = 22;
			public static final int ThrTacrefdir = 23;
			public static final int ThrSplashdir = 24;
			public static final int ThrCockpitdir = 25;
			public static final int ThrSimdatadir = 26;
			public static final int ThrSubtitlesdir = 27;
			public static final int ThrTacrefpicsdir = 28;
			/** Current AC name */
			public static final int AcName = 29;
			/** Current AC NCTR */
			public static final int AcNCTR = 30;
			/** Current 3dbuttons.dat file full path */
			public static final int ButtonsFile = 31;
			/** Current 3dckpit.dat file full path */
			public static final int CockpitFile = 32;
			/**
			 * Multiple entries, one for each NavPoint. Format for each entry is (NP, O1,
			 * O2, PT can be concatenated):
			 */
			public static final int NavPoint = 33;
			/** (number of identifiers; add new IDs only *above* this one) */
			public static final int StringIdentifier_DIM = 34;
		};

		public static class StringStruct extends Structure {
			/**
			 * See StringIdentifier (not type-safe on purpose, so that older readers can
			 * still read "unknown" newer IDs)
			 */
			public int strId;
			/**
			 * The length of the string in "strData", *without* termination! Note that
			 * strData *does* have termination.
			 */
			public int strLength;
			/**
			 * Data storage blob for the string<br>
			 * C type : char*
			 */
			public Pointer strData;

			public StringStruct() {
				super();
			}

			protected List<String> getFieldOrder() {
				return Arrays.asList("strId", "strLength", "strData");
			}

			/**
			 * @param strId     See StringIdentifier (not type-safe on purpose, so that
			 *                  older readers can still read "unknown" newer IDs)<br>
			 * @param strLength The length of the string in "strData", *without*
			 *                  termination! Note that strData *does* have termination.<br>
			 * @param strData   Data storage blob for the string<br>
			 *                  C type : char*
			 */
			public StringStruct(int strId, int strLength, Pointer strData) {
				super();
				this.strId = strId;
				this.strLength = strLength;
				this.strData = strData;
			}

			public StringStruct(Pointer peer) {
				super(peer);
			}

			public static class ByReference extends StringStruct implements Structure.ByReference {

			};

			public static class ByValue extends StringStruct implements Structure.ByValue {

			};
		};

		/**
		 * Version of the StringData shared memory area - only indicates changes to the
		 * StringIdentifier enum
		 */
		public int VersionNum;
		/** How many strings do we have in the area? */
		public int NoOfStrings;
		/** The overall size of the "data" blob that follows */
		public int dataSize;
		/**
		 * Data storage blob for all the strings<br>
		 * C type : StringStruct[]
		 */
		public Pointer data;

		public StringData() {
			super();
		}

		protected List<String> getFieldOrder() {
			return Arrays.asList("VersionNum", "NoOfStrings", "dataSize", "data");
		}

		/**
		 * @param VersionNum  Version of the StringData shared memory area - only
		 *                    indicates changes to the StringIdentifier enum<br>
		 * @param NoOfStrings How many strings do we have in the area?<br>
		 * @param dataSize    The overall size of the "data" blob that follows<br>
		 * @param data        Data storage blob for all the strings<br>
		 *                    C type : StringStruct[]
		 */
		public StringData(int VersionNum, int NoOfStrings, int dataSize, Pointer data) {
			super();
			this.VersionNum = VersionNum;
			this.NoOfStrings = NoOfStrings;
			this.dataSize = dataSize;
			this.data = data;
		}

		public StringData(Pointer peer) {
			super(peer);
		}

		public static class ByReference extends StringData implements Structure.ByReference {

		};

		public static class ByValue extends StringData implements Structure.ByValue {

		};
	};

	/** *** "FalconSharedMemoryAreaDrawing" *** */
	public static class DrawingData extends Structure {
		/** Version of the DrawingData shared memory area */
		public int VersionNum;
		/**
		 * The length of the string in "HUD_commands", *without* termination, note that
		 * HUD_commands *does* have termination
		 */
		public int HUD_length;
		/**
		 * Data storage blob for the string<br>
		 * C type : char*
		 */
		public Pointer HUD_commands;
		/**
		 * The length of the string in "RWR_commands", *without* termination, note that
		 * RWR_commands *does* have termination
		 */
		public int RWR_length;
		/**
		 * Data storage blob for the string<br>
		 * C type : char*
		 */
		public Pointer RWR_commands;
		/**
		 * The length of the string in "HMS_commands", *without* termination, note that
		 * HMS_commands *does* have termination
		 */
		public int HMS_length;
		/**
		 * Data storage blob for the string<br>
		 * C type : char*
		 */
		public Pointer HMS_commands;

		public DrawingData() {
			super();
		}

		protected List<String> getFieldOrder() {
			return Arrays.asList("VersionNum", "HUD_length", "HUD_commands", "RWR_length", "RWR_commands", "HMS_length",
					"HMS_commands");
		}

		/**
		 * @param VersionNum   Version of the DrawingData shared memory area<br>
		 * @param HUD_length   The length of the string in "HUD_commands", *without*
		 *                     termination, note that HUD_commands *does* have
		 *                     termination<br>
		 * @param HUD_commands Data storage blob for the string<br>
		 *                     C type : char*<br>
		 * @param RWR_length   The length of the string in "RWR_commands", *without*
		 *                     termination, note that RWR_commands *does* have
		 *                     termination<br>
		 * @param RWR_commands Data storage blob for the string<br>
		 *                     C type : char*<br>
		 * @param HMS_length   The length of the string in "HMS_commands", *without*
		 *                     termination, note that HMS_commands *does* have
		 *                     termination<br>
		 * @param HMS_commands Data storage blob for the string<br>
		 *                     C type : char*
		 */
		public DrawingData(int VersionNum, int HUD_length, Pointer HUD_commands, int RWR_length, Pointer RWR_commands,
				int HMS_length, Pointer HMS_commands) {
			super();
			this.VersionNum = VersionNum;
			this.HUD_length = HUD_length;
			this.HUD_commands = HUD_commands;
			this.RWR_length = RWR_length;
			this.RWR_commands = RWR_commands;
			this.HMS_length = HMS_length;
			this.HMS_commands = HMS_commands;
		}

		public DrawingData(Pointer peer) {
			super(peer);
		}

		public static class ByReference extends DrawingData implements Structure.ByReference {

		};

		public static class ByValue extends DrawingData implements Structure.ByValue {

		};
	};
}
